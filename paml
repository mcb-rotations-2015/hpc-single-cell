#!/bin/bash

# Usage: parallel-*.sh [--dryrun] IN_FILE DATA_DIR
#
# Options:
# --dryrun  Print the job to run on stdout, but do not run the job.
#

# Parse all arguments.
# 
while [[ $# > 0 ]]; do
    case "$1" in
	--dryrun) DRYRUN=1; shift;;
	*) TSV_FILE="$1"; shift;;
    esac
done

# Name the parallel joblog file according to the input file name.
# Like a Makefile, a joblog prevents multiple runs of the same task,
# as well as logging excellent statistics about each task, which we
# can check while the job is running with `tail -f JOBLOG`.
#
tsv_basename=$(basename ${TSV_FILE}) # Remove directories from tsv_file
tsv_no_ext="${tsv_basename%%.*}"     # Strip the extension

# Optimize for the 16 cores and 128 GB RAM on Ivy Bridge on UConn's
# BECAT cluster [1].  The delay is to allow enough time for initial memory
# allocation.
# 
# [1] http://www.becat.uconn.edu/wiki/index.php/HPC_Getting_Started#Overview_of_cluster_nodes
#
parallel="parallel
 --memfree 10G
 --arg-file ${TSV_FILE}
 --header :
"
if [ -n "${DRYRUN}" ]; then
    parallel="${parallel}
 --dryrun
"
else
    parallel="${parallel}
 --joblog parallel-${tsv_no_ext}.log
 --resume-failed
"
fi

# Make the assumption that the DATA_DIR is at the root of the
# TSV_FILE directory.
# 
data_prefix=$(dirname ${TSV_FILE})/${DATA_DIR}

# We get the {family} column from tsv_file using parallel's
# `--header`.  Basically, `parallel --header : --arg-file FILE COMMAND
# {HEADER_NAME}` does the job of `cut` in the shell, but it is
# infinitely nicer since it uses named fields.
#
fasta_prefix="${data_prefix}/{family}/{family}"

# Code for paml starts here.
# 
# PAML [1] is a single-threaded program for phylogenetic analysis.
# Therefore, to parallelize it, we use GNU Parallel.
#
# [1] abacus.gene.ucl.ac.uk/software/paml.html

${fasta_prefix}_pa.fasta_macse_NT.fasta

paml="
"

# Run all the things!  Use lower memory value for smaller jobs, then
# retry failed jobs with larger memory.
#
mkdir -p ${tsv_no_ext}
${parallel} ${paml} "> ${tsv_no_ext}/{#}-{family}.log"
